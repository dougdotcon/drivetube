// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  googleId      String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  folders       Folder[]
  subscriptions Subscription[]
  payments      Payment[]

  videos    Video[]
  playlists Playlist[]
  favorites Favorite[]

  @@map("users")
}

model Folder {
  id            String   @id @default(uuid())
  name          String
  googleId      String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastAccessed  DateTime?
}

model Video {
  id             String   @id @default(uuid()) @db.VarChar(36)
  userId         String   @map("user_id") @db.VarChar(36)
  name           String   @db.VarChar(100)
  driveId        String   @map("drive_id") @db.VarChar(100)
  folder         String?  @db.VarChar(100)
  mimeType       String   @map("mime_type") @db.VarChar(50)
  thumbnailLink  String?  @map("thumbnail_link") @db.VarChar(255)
  webViewLink    String?  @map("web_view_link") @db.VarChar(255)
  webContentLink String?  @map("web_content_link") @db.VarChar(255)
  size           String   @db.VarChar(20)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlists      PlaylistVideo[]
  favorites      Favorite[]

  @@index([userId])
  @@index([folder])
  @@map("videos")
}

model Playlist {
  id          String   @id @default(uuid()) @db.VarChar(36)
  userId      String   @map("user_id") @db.VarChar(36)
  name        String   @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos      PlaylistVideo[]

  @@index([userId])
  @@map("playlists")
}

model PlaylistVideo {
  playlistId String   @map("playlist_id") @db.VarChar(36)
  videoId    String   @map("video_id") @db.VarChar(36)
  position   Int
  createdAt  DateTime @default(now()) @map("created_at")

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([playlistId, videoId])
  @@index([videoId])
  @@index([position])
  @@map("playlist_videos")
}

model Favorite {
  userId    String   @map("user_id") @db.VarChar(36)
  videoId   String   @map("video_id") @db.VarChar(36)
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([userId, videoId])
  @@index([videoId])
  @@map("favorites")
}

model Subscription {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  provider          String   // "stripe" ou "abacatepay"
  providerId        String   // ID da assinatura no provedor
  status            String   // "active", "cancelled", "expired"
  plan              String   // "basic", "pro", "enterprise"
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  payments          Payment[]
}

model Payment {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  provider       String       // "stripe" ou "abacatepay"
  providerId     String       // ID do pagamento no provedor
  amount         Float
  currency       String
  status         String       // "succeeded", "failed", "pending"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
} 