// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Seed configuration


datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String?
  googleId      String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  isAdmin       Boolean  @default(false)
  planId        String?
  plan          Plan?    @relation(fields: [planId], references: [id])
  folders       Folder[]

  videos       Video[]
  playlists    Playlist[]
  favorites    Favorite[]
  subscription Subscription?
  waitlist     Waitlist?

  @@map("users")
}

model Folder {
  id            String   @id @default(uuid())
  name          String
  googleId      String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastAccessed  DateTime?
}

model Video {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  name           String
  driveId        String   @map("drive_id")
  folder         String?
  mimeType       String   @map("mime_type")
  thumbnailLink  String?  @map("thumbnail_link")
  webViewLink    String?  @map("web_view_link")
  webContentLink String?  @map("web_content_link")
  size           String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlists      PlaylistVideo[]
  favorites      Favorite[]

  @@index([userId])
  @@index([folder])
  @@map("videos")
}

model Playlist {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos      PlaylistVideo[]

  @@index([userId])
  @@map("playlists")
}

model PlaylistVideo {
  playlistId String   @map("playlist_id")
  videoId    String   @map("video_id")
  position   Int
  createdAt  DateTime @default(now()) @map("created_at")

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([playlistId, videoId])
  @@index([videoId])
  @@index([position])
  @@map("playlist_videos")
}

model Favorite {
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([userId, videoId])
  @@index([videoId])
  @@map("favorites")
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float
  interval    String   @default("month") // month, year
  features    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users        User[]
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id            String   @id @default(uuid())
  userId        String   @unique @map("user_id")
  planId        String   @map("plan_id")
  status        String   @default("active") // active, canceled, expired
  startDate     DateTime @default(now()) @map("start_date")
  endDate       DateTime? @map("end_date")
  lastPaymentId String?  @map("last_payment_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan     @relation(fields: [planId], references: [id])
  payments      Payment[]

  @@index([planId])
  @@map("subscriptions")
}

model Payment {
  id             String   @id @default(uuid())
  subscriptionId String   @map("subscription_id")
  amount         Float
  paymentMethod  String   @default("pix") @map("payment_method")
  status         String   @default("pending") // pending, completed, failed
  pixCode        String?  @map("pix_code")
  pixExpiration  DateTime? @map("pix_expiration")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@map("payments")
}

model Waitlist {
  id        String   @id @default(uuid())
  userId    String?  @unique @map("user_id")
  email     String   @unique
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  status    String   @default("pending") // pending, approved, rejected
  notes     String?

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("waitlist")
}